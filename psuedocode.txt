setup the game
- create board (10x10]
- populate board with covered cells
- randomly set 9 cells to be mines
- board should show remaining flags (can go negative, too many flagged)
render board
ask player for coords
ask player if coords are to be cleared or flagged
if coords are flagged, set cell to flag!
if coords are cleared, check for mine
- if no mine then begin checking all coords around for a mine
- - set mined neighbors on the coords and cells around the coords
    *tiles adjacent to a cell with mined neighbors will not be auto cleared
- - re-render board with recursively cleared tiles
- if coords are a mine, game over
- - re-render board showing all mines

data being kept
mine coords
cleared coords
flagged coords
remaining flags count, can be negative

when clearing, if a numbered tile is met, so that is a tile adajecent to a mine
its number is revealed but we do not check the tiles around it

cell class
it "initially is covered"
it "initially is not flagged"
it "initially is not a mine"
it "reveal! sets the tile to not be covered"
it "flag! sets the tile to flagged"
it "mine! sets the tile be a mine"

board class
initialize
it starts with a blank board by default
board state can be set on creation

place_mines
random sets 9 cells to mined

flag cell
sets the cell to flag!

auto_clear(row, col)
get_neighbors
dump from the array any neighbors we've already checked
and any neighbors that have count_mined_neighbors > 0

cells to check
instead of 

when clearing, cells to ignore
@grid[row][col].mined_neighbors > 0 || 
@grid[row][col].covered? == false ||
@grid[row][col].mined? == true ||
@grid[row][col].flagged? == true

what to do when finding a cell that we don't want to ignore
needs to be marked, then we come back and check it

queue = [cell to check]
while queue is not empty
test_cell = queue.pop
get_neighbors(test_cell)
get_neighbors.each { |cell| count_mined_neighbors(cell) }
get_neighbors.delete_if { |cell| cell == cells_to_ignore }
get_neighbors.each { |cell| cell.reveal! }
queue + get_neighbors
end



ignore or 
reveal and don't add to queue or 
reveal and add to queue

reveal_cells(cells_to_check)


build_queue(cells_to_check)



make_move(coords, action)
  if cell(coords)
    if action = :flag
      flag_cell(coords)
      return true
    else
      auto_reveal_search(coords)
      return true
    end
  end
end